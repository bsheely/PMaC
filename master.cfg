# -*- python -*-
# ex: set syntax=python:

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state
c['db_url'] = "sqlite:///state.sqlite"

####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is
# a BuildSlave object, which is created with bot-name, bot-password.  These
# correspond to values given to the buildslave's mktap invocation.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("barker",     "barker-slavepassword"),
               BuildSlave("trebek",     "trebek-slavepassword"),
               BuildSlave("malhome",   "malhome-slavepassword"),
               BuildSlave("diamond",   "diamond-slavepassword"),
               BuildSlave("davinci",   "davinci-slavepassword"),
               BuildSlave("einstein", "einstein-slavepassword"),
               BuildSlave("mana",         "mana-slavepassword"),
               BuildSlave("hawk",         "hawk-slavepassword")]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes. Any class which implements IChangeSource can be
# put here: there are several in buildbot/changes/*.py to choose from.

from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

####### SCHEDULERS

## configure the Schedulers
from buildbot.scheduler import Scheduler
from buildbot.schedulers import timed
nightly = timed.Nightly(name='nightly',
                        builderNames=['PEBIL-trebek', 'PSaPP-trebek', 'PSiNS-trebek', 'PSiNSTracer-trebek'],
                        hour=3)
c['schedulers'] = [nightly]



####### BUILDERS

from buildbot.steps import source, shell
from buildbot.steps.shell import ShellCommand, Compile, Test
from buildbot.process import factory
from buildbot.steps.source import Git

pebilDevelopmentFactory = factory.GNUAutoconf(source=Git(repourl="ssh://trebek.pmaclabs.com/usr/local/app/git_repos/PEBIL.git", branch="development"), configureFlags=["--disable-papi"], test=None)
pebilDevelopmentFactory.addStep(ShellCommand(command=["make", "clean"], description="clean"))                                        
pebilFactory = factory.GNUAutoconf(source=Git(repourl="ssh://trebek.pmaclabs.com/usr/local/app/git_repos/PEBIL.git"), configureFlags=["--disable-papi"], test=None)
pebilFactory.addStep(ShellCommand(command=["make", "clean"], description="clean"))

psappFactory = factory.BuildFactory()
psappFactory.addStep(source.Git(repourl="ssh://trebek.pmaclabs.com/usr/local/app/git_repos/PSaPP.git"))
psappFactory.addStep(shell.Compile(command=["ant"]))
psappFactory.addStep(shell.Test(command=["ant", "check"]))

psinsFactory = factory.BuildFactory()
psinsFactory.addStep(source.Git(repourl="ssh://trebek.pmaclabs.com/usr/local/app/git_repos/PSiNS.git"))
psinsFactory.addStep(Compile, command=["make"])
psinsFactory.addStep(Test, command=["make", "check"])
psinsFactory.addStep(shell.ShellCommand(command=["make", "clean"], description="clean"))

psinsTracerFactory = factory.GNUAutoconf(source=Git(repourl="ssh://trebek.pmaclabs.com/usr/local/app/git_repos/PSiNSTracer.git", mode="clobber"), configureFlags=["--disable-papi"], test=None)
psinsTracerFactory.addStep(ShellCommand(command=["make", "check"], description="test", env={'ECHO_SUPPRESS_NEWLINE_GNU':"-n",'MPI_COMMAND':"mpirun.mpich2 -n 4",'START_MPI':'mpdboot'})) 
psinsTracerFactory.addStep(ShellCommand(command=["make", "clean"], description="clean"))

psinsTracerFactory_diamond = factory.GNUAutoconf(source=Git(repourl="ssh://trebek.pmaclabs.com/usr/local/app/git_repos/PSiNSTracer.git", mode="clobber"), configureFlags=["--disable-papi"], test=None)
psinsTracerFactory_diamond.addStep(ShellCommand(command=["make", "check"], description="test", timeout=7200, env={'ECHO_SUPPRESS_NEWLINE_GNU':"-n",'PBS_DIRECTIVE1':"select=1:ncpus=8:mpiprocs=8",'PBS_DIRECTIVE2':"place=scatter:excl",'MPI_COMMAND':"mpiexec_mpt -np 8",'EXTRA_BATCH_COMMAND':"cd $PBS_O_WORKDIR"})) 
psinsTracerFactory_diamond.addStep(ShellCommand(command=["make", "clean"], description="clean"))

psinsTracerFactory_davinci = factory.GNUAutoconf(source=Git(repourl="ssh://trebek.pmaclabs.com/usr/local/app/git_repos/PSiNSTracer.git", mode="clobber"), configureFlags=["--disable-papi"], compile=["gmake", "all"], test=None)
psinsTracerFactory_davinci.addStep(ShellCommand(command=["gmake", "check"], description="test", timeout=7200, env={'ECHO_SUPPRESS_NEWLINE_AIX':"\c",'PBS_DIRECTIVE1':"select=1:ncpus=8:mpiprocs=8",'PBS_DIRECTIVE2':"place=scatter:excl",'MPI_COMMAND':"poe"})) 
psinsTracerFactory_davinci.addStep(ShellCommand(command=["gmake", "clean"], description="clean"))

psinsTracerFactory_einstein = factory.GNUAutoconf(source=Git(repourl="ssh://trebek.pmaclabs.com/usr/local/app/git_repos/PSiNSTracer.git", mode="clobber"), configureFlags=["--disable-papi"], test=None)
psinsTracerFactory_einstein.addStep(ShellCommand(command=["make", "check"], description="test", timeout=7200, env={'ECHO_SUPPRESS_NEWLINE_GNU':"-n",'PBS_DIRECTIVE1':"mppwidth=8",'PBS_DIRECTIVE2':"mppnppn=4",'MPI_COMMAND':"aprun -N 4 -n 8",'EXTRA_BATCH_COMMAND':"cd $WORKDIR"})) 
psinsTracerFactory_einstein.addStep(ShellCommand(command=["make", "clean"], description="clean"))

psinsTracerFactory_mana = factory.GNUAutoconf(source=Git(repourl="ssh://trebek.pmaclabs.com/usr/local/app/git_repos/PSiNSTracer.git", mode="clobber"), configureFlags=["--disable-papi"], test=None)
psinsTracerFactory_mana.addStep(ShellCommand(command=["make", "check"], description="test", timeout=7200, env={'ECHO_SUPPRESS_NEWLINE_GNU':"-n",'PBS_DIRECTIVE1':"select=1:ncpus=8:mpiprocs=8",'PBS_DIRECTIVE2':"place=scatter",'MPI_COMMAND':"mpirun"})) 
psinsTracerFactory_mana.addStep(ShellCommand(command=["make", "clean"], description="clean"))

psinsTracerFactory_hawk = factory.GNUAutoconf(source=Git(repourl="ssh://trebek.pmaclabs.com/usr/local/app/git_repos/PSiNSTracer.git", mode="clobber"), configureFlags=["--disable-papi"], test=None)
psinsTracerFactory_hawk.addStep(ShellCommand(command=["make", "check"], description="test", timeout=7200, env={'ECHO_SUPPRESS_NEWLINE_GNU':"-n",'PBS_DIRECTIVE1':"select=1:ncpus=8:mpiprocs=8",'PBS_DIRECTIVE2':"place=scatter:excl",'MPI_COMMAND':"mpirun -np 8"})) 
psinsTracerFactory_hawk.addStep(ShellCommand(command=["make", "clean"], description="clean"))

from buildbot.config import BuilderConfig
c['builders'] = [
    BuilderConfig(name="PEBIL-development-32bit",
                  slavename="malhome",
                  builddir="pebil-development-32bit",
                  factory=pebilDevelopmentFactory),
    BuilderConfig(name="PEBIL-trebek",
                  slavename="trebek",
                  builddir="pebil-development-64bit",
                  factory=pebilFactory),
    BuilderConfig(name="PEBIL-diamond",
                  slavename="diamond",
                  builddir="pebil-master-diamond",
                  factory=pebilFactory),
    BuilderConfig(name="PSaPP-trebek",
                  slavename="trebek",
                  builddir="psapp",
                  factory=psappFactory),
    BuilderConfig(name="PSiNS-trebek",
                  slavename="trebek",
                  builddir="psins",
                  factory=psinsFactory),
    BuilderConfig(name="PSiNSTracer-trebek",
                  slavename="trebek",
                  builddir="psinsTracer",
                  factory=psinsTracerFactory),
    BuilderConfig(name="PSiNSTracer-diamond",
                  slavename="diamond",
                  builddir="psinsTracer-diamond",
                  factory=psinsTracerFactory_diamond),
    BuilderConfig(name="PSiNSTracer-davinci",
                  slavename="davinci",
                  builddir="psinsTracer-davinci",
                  factory=psinsTracerFactory_davinci),
    BuilderConfig(name="PSiNSTracer-einstein",
                  slavename="einstein",
                  builddir="psinsTracer-einstein",
                  factory=psinsTracerFactory_einstein),
    BuilderConfig(name="PSiNSTracer-mana",
                  slavename="mana",
                  builddir="psinsTracer-mana",
                  factory=psinsTracerFactory_mana),
    BuilderConfig(name="PSiNSTracer-hawk",
                  slavename="hawk",
                  builddir="psinsTracer-hawk",
                  factory=psinsTracerFactory_hawk)
    ]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = False,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

from buildbot.status import words
c['status'].append(words.IRC(host="irc.freenode.net", nick="pmacbot", channels=["#pmac_buildbot"]))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually committing changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "PMaC Tools"
c['projectURL'] = "http://www.pmaclabs.com/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"
